[{"C:\\Users\\91831\\Desktop\\my-app\\my-app\\src\\index.js":"1","C:\\Users\\91831\\Desktop\\my-app\\my-app\\src\\App.js":"2","C:\\Users\\91831\\Desktop\\my-app\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\91831\\Desktop\\my-app\\my-app\\src\\KanbanBoard.js":"4"},{"size":535,"mtime":1698517756278,"results":"5","hashOfConfig":"6"},{"size":3261,"mtime":1698669807848,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1698517756580,"results":"8","hashOfConfig":"6"},{"size":8786,"mtime":1698670004044,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1eqwvt2",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\91831\\Desktop\\my-app\\my-app\\src\\index.js",[],[],"C:\\Users\\91831\\Desktop\\my-app\\my-app\\src\\App.js",["23","24"],[],"import React, { useState, useEffect } from 'react';\nimport KanbanBoard from './KanbanBoard';\nimport './App.css';\nimport sliderImage from './img/slider.png';\n\nfunction App() {\n  const [tickets, setTickets] = useState([]);\n  const [groupingOption, setGroupingOption] = useState('status');\n  const [sortingOption, setSortingOption] = useState('priority');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isOverlayVisible, setIsOverlayVisible] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://api.quicksell.co/v1/internal/frontend-assignment');\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const data = await response.json();\n        setTickets(data.tickets);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleGroupingChange = (option) => {\n    // Save the grouping option to Local Storage\n    localStorage.setItem('groupingOption', option);\n    setGroupingOption(option);\n  };\n\n  const handleSortingChange = (option) => {\n    // Save the sorting option to Local Storage\n    localStorage.setItem('sortingOption', option);\n    setSortingOption(option);\n  };\n\n  // Load grouping and sorting options from Local Storage\n  useEffect(() => {\n    const savedGroupingOption = localStorage.getItem('groupingOption');\n    const savedSortingOption = localStorage.getItem('sortingOption');\n\n    if (savedGroupingOption) {\n      setGroupingOption(savedGroupingOption);\n    }\n\n    if (savedSortingOption) {\n      setSortingOption(savedSortingOption);\n    }\n  }, []);\n\n  const toggleOverlayVisibility = () => {\n    setIsOverlayVisible(!isOverlayVisible);\n  };\n\n  return (\n    <div className=\"app\">\n      <nav className=\"navbar\">\n        <div className=\"overlay-button\">\n          <button className=\"display-button\" onClick={toggleOverlayVisibility}>\n            <img className=\"small-image rotated-image\" src={sliderImage} alt=\"Application\" /> Display\n          </button>\n          <div className=\"dropdown-content\" style={{ display: isOverlayVisible ? 'block' : 'none' }}>\n            <div className=\"grp\">\n              <label className=\"grp-tit\">Grouping:</label>\n              <div className=\"grp-se\">\n                <select onChange={(e) => handleGroupingChange(e.target.value)} className='grp-on'>\n                  <option value=\"status\">Status</option>\n                  <option value=\"user\">User</option>\n                  <option value=\"priority\">Priority</option>\n                </select>\n              </div>\n            </div>\n            <div className='sor'>\n              <label className='sor-tit'>Sorting:</label>\n              <div className='sor-se'>\n                <select onChange={(e) => handleSortingChange(e.target.value)} className='sor-on'>\n                  <option value=\"priority\">Priority</option>\n                  <option value=\"title\">Title</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <KanbanBoard tickets={tickets} groupingOption={groupingOption} sortingOption={sortingOption} />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\91831\\Desktop\\my-app\\my-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\91831\\Desktop\\my-app\\my-app\\src\\KanbanBoard.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":10,"column":10,"nodeType":"27","messageId":"28","endLine":10,"endColumn":21},{"ruleId":"25","severity":1,"message":"29","line":10,"column":23,"nodeType":"27","messageId":"28","endLine":10,"endColumn":37},"no-unused-vars","'isModalOpen' is assigned a value but never used.","Identifier","unusedVar","'setIsModalOpen' is assigned a value but never used."]